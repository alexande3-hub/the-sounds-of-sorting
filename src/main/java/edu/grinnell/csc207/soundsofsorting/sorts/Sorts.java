package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        for (int i = (arr.length - 1); i >= 0; i--) {
            int max = i;
            for (int j = (i - 1); j >= 0; j--) {
                if (arr[max].compareTo(arr[j]) == -1) {
                    max = j;
                }
            } swap(arr, i, max);
        }
        return null;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
        for (int i = 0; i < (arr.length - 1); i++) {
            int min = i;
            for (int j = (i + 1); j < (arr.length - 1); j++) {
                if (arr[min].compareTo(arr[j]) == 1) {
                    min = j;
                }
            } swap(arr, i, min);
        }
        return null;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        for (int i = 1; i < (arr.length - 1); i++) {
            int index = 0;
            T cur = arr[i];
            while (arr[index].compareTo(arr[i]) == -1) {
                index++;
            } for (int j = i; j > index; j--) {
                swap(arr, j, (j - 1));
            } arr[index] = cur;
        }
        return null;
    }

        /**

     * Sorts the array according to the merge sort algorithm:

     * <ol>

     * <li>Sort the left half of the array recursively.</li>

     * <li>Sort the right half of the array recursively.</li>

     * <li>Merge the two sorted halves into a sorted whole.</li>

     * </ol>

     * @param <T> the carrier type of the array

     * @param arr the array to sort

     * @param tempArr a holding clone for the original array

     * @param ind1 the starting index of each array subset (inclusive)

     * @param ind2 the ending index of each array subset (exclusive)

     */

     public static <T extends Comparable<? super T>> void mergeSortHelper(T[] arr, T[] tempArr, int ind1, int ind2) {
        if (ind2 - ind1 == 1) {
            if (arr[ind1].compareTo(arr[ind2]) == 1) {
                swap(arr, ind1, ind2);
            }
        } else if (ind2 - ind1 > 1) {
            mergeSortHelper(arr, tempArr, 0, (ind2 - (ind2 / 2)));
            mergeSortHelper(arr, tempArr, ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1), ind2);
            tempArr = arr;
            int i1 = ind1;
            int i2 = ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1);
            for (int i = ind1; i < ind2; i++) {
                if (tempArr[i2].compareTo(tempArr[i1]) == -1) {
                    arr[i] = tempArr[ind2];
                    i2++;
                } else {
                    arr[i] = tempArr[ind1];
                    i1++;
                }
            }
        }
    }


    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(
            T[] arr) {
        T[] arr1 = Arrays.copyOf(arr, arr.length);
        arr1 = arr;
        mergeSortHelper(arr, arr1, 0, arr.length);
        return null;
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        // TODO: fill me in!
        return null;
    }
}
