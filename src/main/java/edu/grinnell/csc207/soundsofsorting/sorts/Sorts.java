package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;
import java.util.Random;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {

    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List<SortEvent<T>> lst = new java.util.LinkedList<>();
        for (int i = (arr.length - 1); i >= 0; i--) {
            int max = i;
            for (int j = (i - 1); j >= 0; j--) {
                lst.add(new CompareEvent<T>(max, j));
                if (arr[max].compareTo(arr[j]) == -1) {
                    max = j;
                }
            }
            for (int k = max; k < i; k++) {
                swap(arr, k, (k + 1));
                lst.add(new SwapEvent<T>(k, (k + 1)));
            }
        }
        return lst;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(
            T[] arr) {
        List<SortEvent<T>> lst = new java.util.LinkedList<>();
        for (int i = 0; i < arr.length; i++) {
            int min = i;
            for (int j = (i + 1); j < arr.length; j++) {
                lst.add(new CompareEvent<T>(min, j));
                if (arr[min].compareTo(arr[j]) == 1) {
                    min = j;
                }
            } swap(arr, i, min);
            lst.add(new SwapEvent<T>(i, min));
        }
        return lst;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(
            T[] arr) {
        List<SortEvent<T>> lst = new java.util.LinkedList<>();
        for (int i = 1; i < arr.length; i++) {
            int index = 0;
            T cur = arr[i];
            lst.add(new CompareEvent<T>(index, i));
            while (arr[index].compareTo(arr[i]) == -1) {
                index++;
            } for (int j = i; j > index; j--) {
                swap(arr, j, (j - 1));
                lst.add(new SwapEvent<T>(j, (j - 1)));
            } arr[index] = cur;
            lst.add(new CopyEvent<T>(index, cur));
        }
        return lst;
    }

    /**
     * Sorts the array according to the merge sort algorithm:
     * <ol>
     * <li>Sort the left half of the array recursively.</li>
     * <li>Sort the right half of the array recursively.</li>
     * <li>Merge the two sorted halves into a sorted whole.</li>
     * </ol>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param tempArr a holding clone for the original array
     * @param ind1 the starting index of each array subset (inclusive)
     * @param ind2 the ending index of each array subset (exclusive)
     * @param lst the list carrying the sort events generated by this sort
     */
     public static <T extends Comparable<? super T>> void mergeSortHelper(T[] arr, T[] tempArr, 
            int ind1, int ind2, List<SortEvent<T>> lst) {
        if (ind2 - ind1 == 2) {
            lst.add(new CompareEvent<T>(ind1, ind2));
            if (arr[ind1].compareTo(arr[ind2 - 1]) == 1) {
                swap(arr, ind1, ind2 - 1);
                lst.add(new SwapEvent<T>(ind1, ind2 - 1));
            }
        } else if (ind2 - ind1 > 2) {
            mergeSortHelper(arr, tempArr, 0, ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1), lst);
            mergeSortHelper(arr, tempArr, ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1), ind2, lst);
            tempArr = arr;
            int i1 = ind1;
            int i2 = ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1);
            for (int i = ind1; i < ind2; i++) {
                lst.add(new CompareEvent<T>(i2, i1));
                if (tempArr[i2].compareTo(tempArr[i1]) == -1) {
                    arr[i] = tempArr[i2];
                    lst.add(new CopyEvent<T>(i, tempArr[i2]));
                    i2++;
                } else {
                    arr[i] = tempArr[i1];
                    lst.add(new CopyEvent<T>(i, tempArr[i1]));
                    i1++;
                }
            }
        }
    }


    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(
            T[] arr) {
        List<SortEvent<T>> lst = new java.util.LinkedList<>();
        T[] arr1 = Arrays.copyOf(arr, arr.length);
        arr1 = arr;
        mergeSortHelper(arr, arr1, 0, arr.length, lst);
        return lst;
    }

    /**
     * Sorts the array according to the quick sort algorithm:
     * <ol>
     * <li>Choose a pivot value and partition the array according to the pivot.</li>
     * <li>Sort the left half of the array recursively.</li>
     * <li>Sort the right half of the array recursively.</li>
     * </ol>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param tempArr a holding clone for the original array
     * @param ind1 the starting index of each array subset (inclusive)
     * @param ind2 the ending index of each array subset (exclusive)
     * @param lst the list carrying the sort events generated by this sort
     */
     public static <T extends Comparable<? super T>> void quickSortHelper(T[] arr, T[] tempArr, 
            int ind1, int ind2, List<SortEvent<T>> lst) {
        Random rand = new Random();
        if (ind2 - ind1 == 2) {
            lst.add(new CompareEvent<T>(ind1, ind2));
            if (arr[ind1].compareTo(arr[ind2 - 1]) == 1) {
                swap(arr, ind1, ind2 - 1);
                lst.add(new SwapEvent<T>(ind1, ind2 - 1));
            }
        } else if (ind2 - ind1 > 2) {
            T split = arr[rand.nextInt(ind2 - ind1) + ind1];
            int i1 = ind1;
            int i2 = ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1);
            for (int i = ind1; i < ind2; i++) {
                if (tempArr[i].compareTo(split) == 1) {
                    arr[i2] = tempArr[i];
                    lst.add(new CopyEvent<T>(i2, tempArr[i]));
                    i2++;
                } else {
                    arr[i1] = tempArr[i];
                    lst.add(new CopyEvent<T>(i1, tempArr[i]));
                    i1++;
                }
            }
            tempArr = arr;
            quickSortHelper(arr, tempArr, 0, ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1), lst);
            quickSortHelper(arr, tempArr, ((ind2 - ind1) - ((ind2 - ind1) / 2) + ind1), ind2, lst);
        }
    }


    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> lst = new java.util.LinkedList<>();
        T[] arr1 = Arrays.copyOf(arr, arr.length);
        arr1 = arr;
        quickSortHelper(arr, arr1, 0, arr.length, lst);
        return lst;
    }

    /**
     * Sorts the array according to the cocktail shaker sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> cocktailShakerSort(T[] arr) {
        List<SortEvent<T>> lst = new java.util.LinkedList<>();
        int i = (arr.length - 1);
        int j = 0;
        while (i > (arr.length / 2)) {
            int max = i;
            for (int k = (i - 1); k >= 0; k--) {
                lst.add(new CompareEvent<T>(max, k));
                if (arr[max].compareTo(arr[k]) == -1) {
                    max = k;
                }
            }
            for (int l = max; l < i; l++) {
                swap(arr, l, (l + 1));
                lst.add(new SwapEvent<T>(l, (l + 1)));
            }
            int min = j;
            for (int m = (j + 1); m < arr.length; m++) {
                lst.add(new CompareEvent<T>(min, m));
                if (arr[min].compareTo(arr[m]) == 1) {
                    min = m;
                } 
            }
            for (int n = min; n > j; n--) {
                swap(arr, n, (n - 1));
                lst.add(new SwapEvent<T>(n, (n - 1)));
            }
            i--;
            j++;
        }
        return lst;
    }

    /**
     * Sorts the array based on the types of sort events in the 'events' parameter.
     * @param <T> the carrier type of the array
     * @param l the array to sort
     * @param events the list of events that will be applied to the array
     */
    public <T> void eventSort(T[] l, List<SortEvent<T>> events) {
        for(int i = 0; i < events.size(); i++) {
            events.get(i).apply(l);
        }
    } 
}
